#lang sicp

(define (cube x) (* x x x))
(define (add x) (+ x 1))
(define (sub x) (- x 1))


;rek
(define (sum-integers a b)
  (if (> a b)
      0
      (+ a (sum-integers (+ a 1)  b))))

;rek
(define (sum-cubes a b)
  (if (> a b)
      0
      (+ (cube a)
         (sum-cubes (+ a 1) b))))

;rek
(define (pi-sum a b)
  (if (> a b)
      0
      (+ (/ 1.0 (* a (+ a 2)))
         (pi-sum (+ a 4) b))))


;rek ako je sum rek
(define (integral f a b dx)
  (define (add-dx x)
    (+ x dx))  
;  (* (sum f (+ a (/ dx 2.0)) add-dx b) dx)
  0)

(integral cube 0 1 0.01)


(define (sum-iter term a next b)
  (define (iter a result)
    (if
     (> a b)
     result    
     (iter (next a) (+ (term a) result) )))
  (iter a  0))


(define (sum term a next b)
  (if (> a b)
    0
    (+ (term a)
       (sum term (next a) next b))))

;accumulate
;combiner - kako spaja result sa sljdecom vrijednosti funkcije f
;null-value - pocetna vrijednost result-a; na koju stavlja ostale
;f - funkcija 
(define (accumulate combiner null-value f a step b)
  (define (iter tmp_a result)
    (if
     (> tmp_a b)
     result
     (iter (step tmp_a) (combiner result (f tmp_a)))))
  (iter a null-value))



(accumulate + 0 (lambda (x) x) 1 (lambda (x) (+ x 1)) 100) ;sum od 1 do 100

(sum cube 1 (lambda (x)(+ x 1)) 2)


(sum cube 1 add 2)
