#lang sicp
;redefine rational nmbers  Â¬ str. 116

(define make-rat cons)
(define numer car)
(define denom cdr)


(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer x) (denom y)))
            (* (denom x) (denom y))))


(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer x) (denom y)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))

(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer x) (denom y))))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(define half (make-rat 1 2))
(define third (make-rat 1 3))
(define one (make-rat 1 0))

(print-rat (add-rat third (add-rat third (add-rat third (add-rat third (add-rat third third))))))


;str 119

;str 120 optimizacija


; str 121

(define (average x y) (/ (+ x y) 2))

(define (make-segment P Q) (cons P Q))
(define (start-segment S) (car S))
(define (end-segment S) (cdr S))

(define (make-point x y) (cons x y))
(define (x-point P) (car P))
(define (y-point P) (cdr P))

(define (midpoint-segment s)
  (let ((x1 (x-point (start-segment s)))
        (y1 (y-point (start-segment s)))
        (x2 (x-point (end-segment s)))
        (y2 (y-point (end-segment s))))
    (make-point (average x1 x2)
                (average y1 y2))))


(define (print-point P)
  (newline)
  (display "(")
  (display (x-point P))
  (display ",")
  (display (y-point P))
  (display ")"))


(define A (make-point 3 2))
(define B (make-point 7 14))
(define s (make-segment A B))
(print-point (midpoint-segment s))

; tjt, 2.1.3 sicp











