#lang racket


(define (rek i)
  (cond
    [(>= i 10) #f]
    [else (display i) (rek (add1 i))]))

(define (sum-to-n n)
  (if (> n 0)
      (+ n (sum-to-n (- n 1)))
      0))

(define (sum-to-x x)
  (cond
    [(> x 0) (printf "~a, " x) (+ x (sum-to-x (- x 1)))]
    [else 0]))


(define (list-and-output x)
  (cond
    [(< x 10) (printf "~a " x)  (list-and-output (+ x 1))]
    [else 10]))



;od tuda

(define (multiply-and-output x i)
  (cond
    [(< i 13) (printf "~a   " (* x i))  (multiply-and-output x (+ i 1))]
    [else (* x i)]))

; OVA funkcija (multiplication-table)
(define (multiplication-table (j 1))
  (cond
    [(< j 13) (multiply-and-output j 1)(printf "\n")(multiplication-table (add1 j))]
    [else (printf "\n")]))





